/*
 * generated by Xtext 2.10.0
 */
package org.ancit.examples.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyABDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AddressBookElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.ancit.examples.xtext.MyABDsl.AddressBook");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAddressBookAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAddressBookKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGroupsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cGroupsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cGroupsGroupParserRuleCall_3_2_0 = (RuleCall)cGroupsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cGroupsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cGroupsGroupParserRuleCall_3_3_1_0 = (RuleCall)cGroupsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cContactsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cContactsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cContactsContactParserRuleCall_4_2_0 = (RuleCall)cContactsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cContactsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cContactsContactParserRuleCall_4_3_1_0 = (RuleCall)cContactsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AddressBook:
		//	{AddressBook}
		//	'AddressBook'
		//	'{' ('groups' '{' groups+=Group ("," groups+=Group)* '}')? ('contacts' '{' contacts+=Contact ("," contacts+=Contact)*
		//	'}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{AddressBook} 'AddressBook' '{' ('groups' '{' groups+=Group ("," groups+=Group)* '}')? ('contacts' '{' contacts+=Contact
		//("," contacts+=Contact)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{AddressBook}
		public Action getAddressBookAction_0() { return cAddressBookAction_0; }
		
		//'AddressBook'
		public Keyword getAddressBookKeyword_1() { return cAddressBookKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('groups' '{' groups+=Group ("," groups+=Group)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'groups'
		public Keyword getGroupsKeyword_3_0() { return cGroupsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//groups+=Group
		public Assignment getGroupsAssignment_3_2() { return cGroupsAssignment_3_2; }
		
		//Group
		public RuleCall getGroupsGroupParserRuleCall_3_2_0() { return cGroupsGroupParserRuleCall_3_2_0; }
		
		//("," groups+=Group)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//groups+=Group
		public Assignment getGroupsAssignment_3_3_1() { return cGroupsAssignment_3_3_1; }
		
		//Group
		public RuleCall getGroupsGroupParserRuleCall_3_3_1_0() { return cGroupsGroupParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//('contacts' '{' contacts+=Contact ("," contacts+=Contact)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'contacts'
		public Keyword getContactsKeyword_4_0() { return cContactsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//contacts+=Contact
		public Assignment getContactsAssignment_4_2() { return cContactsAssignment_4_2; }
		
		//Contact
		public RuleCall getContactsContactParserRuleCall_4_2_0() { return cContactsContactParserRuleCall_4_2_0; }
		
		//("," contacts+=Contact)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//contacts+=Contact
		public Assignment getContactsAssignment_4_3_1() { return cContactsAssignment_4_3_1; }
		
		//Contact
		public RuleCall getContactsContactParserRuleCall_4_3_1_0() { return cContactsContactParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.ancit.examples.xtext.MyABDsl.Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cContactsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cContactsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cContactsContactCrossReference_4_2_0 = (CrossReference)cContactsAssignment_4_2.eContents().get(0);
		private final RuleCall cContactsContactEStringParserRuleCall_4_2_0_1 = (RuleCall)cContactsContactCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cContactsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cContactsContactCrossReference_4_3_1_0 = (CrossReference)cContactsAssignment_4_3_1.eContents().get(0);
		private final RuleCall cContactsContactEStringParserRuleCall_4_3_1_0_1 = (RuleCall)cContactsContactCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Group:
		//	{Group}
		//	'Group'
		//	name=EString
		//	'{' ('contacts' '(' contacts+=[Contact|EString] ("," contacts+=[Contact|EString])* ')')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Group} 'Group' name=EString '{' ('contacts' '(' contacts+=[Contact|EString] ("," contacts+=[Contact|EString])* ')')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Group}
		public Action getGroupAction_0() { return cGroupAction_0; }
		
		//'Group'
		public Keyword getGroupKeyword_1() { return cGroupKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('contacts' '(' contacts+=[Contact|EString] ("," contacts+=[Contact|EString])* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'contacts'
		public Keyword getContactsKeyword_4_0() { return cContactsKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//contacts+=[Contact|EString]
		public Assignment getContactsAssignment_4_2() { return cContactsAssignment_4_2; }
		
		//[Contact|EString]
		public CrossReference getContactsContactCrossReference_4_2_0() { return cContactsContactCrossReference_4_2_0; }
		
		//EString
		public RuleCall getContactsContactEStringParserRuleCall_4_2_0_1() { return cContactsContactEStringParserRuleCall_4_2_0_1; }
		
		//("," contacts+=[Contact|EString])*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//contacts+=[Contact|EString]
		public Assignment getContactsAssignment_4_3_1() { return cContactsAssignment_4_3_1; }
		
		//[Contact|EString]
		public CrossReference getContactsContactCrossReference_4_3_1_0() { return cContactsContactCrossReference_4_3_1_0; }
		
		//EString
		public RuleCall getContactsContactEStringParserRuleCall_4_3_1_0_1() { return cContactsContactEStringParserRuleCall_4_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ContactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.ancit.examples.xtext.MyABDsl.Contact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContactAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContactKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAddressKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAddressAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAddressEStringParserRuleCall_4_1_0 = (RuleCall)cAddressAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEmailKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEmailAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEmailEStringParserRuleCall_5_1_0 = (RuleCall)cEmailAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Contact:
		//	{Contact}
		//	'Contact'
		//	name=EString
		//	'{' ('address' address=EString)? ('email' email=EString)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Contact} 'Contact' name=EString '{' ('address' address=EString)? ('email' email=EString)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Contact}
		public Action getContactAction_0() { return cContactAction_0; }
		
		//'Contact'
		public Keyword getContactKeyword_1() { return cContactKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('address' address=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'address'
		public Keyword getAddressKeyword_4_0() { return cAddressKeyword_4_0; }
		
		//address=EString
		public Assignment getAddressAssignment_4_1() { return cAddressAssignment_4_1; }
		
		//EString
		public RuleCall getAddressEStringParserRuleCall_4_1_0() { return cAddressEStringParserRuleCall_4_1_0; }
		
		//('email' email=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'email'
		public Keyword getEmailKeyword_5_0() { return cEmailKeyword_5_0; }
		
		//email=EString
		public Assignment getEmailAssignment_5_1() { return cEmailAssignment_5_1; }
		
		//EString
		public RuleCall getEmailEStringParserRuleCall_5_1_0() { return cEmailEStringParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.ancit.examples.xtext.MyABDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final AddressBookElements pAddressBook;
	private final GroupElements pGroup;
	private final ContactElements pContact;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyABDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAddressBook = new AddressBookElements();
		this.pGroup = new GroupElements();
		this.pContact = new ContactElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.ancit.examples.xtext.MyABDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AddressBook:
	//	{AddressBook}
	//	'AddressBook'
	//	'{' ('groups' '{' groups+=Group ("," groups+=Group)* '}')? ('contacts' '{' contacts+=Contact ("," contacts+=Contact)*
	//	'}')?
	//	'}';
	public AddressBookElements getAddressBookAccess() {
		return pAddressBook;
	}
	
	public ParserRule getAddressBookRule() {
		return getAddressBookAccess().getRule();
	}
	
	//Group:
	//	{Group}
	//	'Group'
	//	name=EString
	//	'{' ('contacts' '(' contacts+=[Contact|EString] ("," contacts+=[Contact|EString])* ')')?
	//	'}';
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}
	
	//Contact:
	//	{Contact}
	//	'Contact'
	//	name=EString
	//	'{' ('address' address=EString)? ('email' email=EString)?
	//	'}';
	public ContactElements getContactAccess() {
		return pContact;
	}
	
	public ParserRule getContactRule() {
		return getContactAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
